- const: meaning roughly "I promise not to change this value". This is used  primarly to specify interfaces, so that data can be passed to functions     wihtout fear of it being modified. The compiler enforces the promise made  by const.

- const expr: meaning roughly "to be evaluated at compile time". This is     used primarily to specify constants, to allow placement of data in memory  where it is unlikely to be corrupted, and for performance.

For example:

const int dmv = 17;  // dmv is a named constant;
int var = 16;        // var is not constant
constexpr double max1 = 1.4*square(dmv); // Ok if square(17) is a constant
constexprt double max2 = 1.4*square(var); //error; var is not a constant
const double max3 = 1.4*square(var); //Ok, may be evalueated at run time
double sum(const vector<double>&); //sum will not modify its argument
vector<double> v {1.2, 3.4, 4.5}; //v is not a constant
const double s1=sum(v); //Ok: evaluated at run time
constexpr double s2=sum(v); //error:sum(v) not constant expression

For a functions to be usable in a constant expression, that is, in an
expression that will be evaluated by the compiler, it must be defined
constexpr.
For example:
constexpr double square(double x){return x*x;}